jQuery(document).ready(function($) {
    // Scroll to section init
    $("a[rel='2id']").mPageScroll2id();

    // Logos slider
    $('.logos-slider').slick({
        infinite: true,
        slidesToShow: 5,
        slidesToScroll: 1,
        autoplay: true,
        arrows: true,
        autoplaySpeed: 2000,
        prevArrow: '.logos-prev',
        nextArrow: '.logos-next'  
    });    
    //Review slider
    $('.past-review').slick({
        infinite: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay: true,
        autoplaySpeed: 1000,
        prevArrow: '.com-prev',
        nextArrow: '.com-next',
        dots: true,
        customPaging: function(slider, i) {
            for (var n = 0; n < 3; n++) {
                return ' <a href="#" class="dot">' + $(slider.$slides[i]).find('.slide-title').text() + '</a>';
            }
        }
    });

    //Gallery init 
    $('.past-gallery').magnificPopup({
        delegate: 'a',
        type: 'image',
        tLoading: 'Загрузка #%curr%...',
        mainClass: 'mfp-img-mobile',
        gallery: {
            enabled: true,
            navigateByImgClick: true,
            preload: [0, 1] // Will preload 0 - before current, and 1 after the current image
        },
        image: {
            tError: '<a href="%url%">Изображение #%curr%</a> не может быть загружено.',
        }
    });

    //Loading form
    $('.open-form').magnificPopup({
        type: 'inline',
        preloader: false,
        focus: '#name',
    });
    var magnificPopup = $.magnificPopup.instance;

    //Send forms data
    function sendForm(input_form) {
        var form = $(input_form);
        var error = false;
        form.find('.required').each(function() {
            if (validate(this)) {
                error = true;
            }
        });
        //Send data
        if (!error) {
            var str = form.serialize();
            console.log(str);
            console.log(form);
            $.ajax({
                type: 'POST',
                url: 'send.php',
                data: str,
                success: function() {

                    form.find('.required').each(function() {
                        $(this).val('');
                    })
                    $('.ajax-loader').hide();
                    $.magnificPopup.open({
                        items: {
                            src: '#form-ok',
                            type: 'inline',
                            closeBtnInside: true,
                            showCloseBtn: true
                        }
                    });

                    setTimeout(function() {
                        magnificPopup.close();
                    }, 3000);
                    $('.form-error').html('');
                },
                beforeSend: function(){
                    $('.ajax-loader').show();
                }
            })
        }
    }

    //Validation
    function validate(obj) {
        var error = false;
        parent = $(obj).parent();
        if (!noEmpty($(obj))) {
            $(obj).addClass('error');
            if (!error) {
                error = true;
                parent.children('.form-error').html('Одно из полей не заполнено');
                throw new Error("Something went badly wrong!");
            }
        } else {
            $(obj).removeClass('error');
            error = false;
            $('.form-error').html('');
        }

        if ($(obj).attr('type') == 'email' && !isEmail($(obj))) {
            $(obj).addClass('error');
            if (!error) {
                error = true;
                parent.children('.form-error').html('Проверьте правильность введённых данных');
                throw new Error("Something went badly wrong!");
            }
        } else if ($(obj).attr('type') == 'email') {
            $(obj).removeClass('error');
            error = false;
            parent.children('.form-error').html('');
        }

        if ($(obj).attr('name') == 'phone' && !isPhone($(obj))) {
            $(obj).addClass('error');
            if (!error) {
                error = true;
                parent.children('.form-error').html('Неверный телефон');
                throw new Error("Something went badly wrong!");
            }
        } else if ($(obj).attr('type') == 'phone') {
            $(obj).removeClass('error');
            error = false;
            $('.form-error').html('');
        }
        return error;
    }


    //Is on mo empty value testing
    function noEmpty(element) {
        if ($(element).val() == '') {
            return false;
        } else {
            return true;
        }
    }

    //Is email testing
    function isEmail(element) {
        var email = /^[-\w.]+@([A-z0-9][-A-z0-9]+\.)+[A-z]{2,4}$/;
        return email.test($(element).val());
    }

    //Is text field numbers and charts in latin and cyrilic
    function isText(element) {
        var text = /^[а-яА-ЯёЁa-zA-Z0-9]+$/;
        return text.test($(element).val());
    }

    //Is numbers for phone field
    function isPhone(element) {
        var text = /([0-9]+)/;
        return text.test($(element).val());
    }

    $('.form-btn').click(function() {
        sendForm('#reg-form');
    })
    $('.send-pr').click(function() {
        sendForm('#regwi-form');
    })

    $('input').on('change', function() {
        validate(this);
    })

});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJzY3JpcHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsialF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigkKSB7XHJcbiAgICAvLyBTY3JvbGwgdG8gc2VjdGlvbiBpbml0XHJcbiAgICAkKFwiYVtyZWw9JzJpZCddXCIpLm1QYWdlU2Nyb2xsMmlkKCk7XHJcblxyXG4gICAgLy8gTG9nb3Mgc2xpZGVyXHJcbiAgICAkKCcubG9nb3Mtc2xpZGVyJykuc2xpY2soe1xyXG4gICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgIHNsaWRlc1RvU2hvdzogNSxcclxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcclxuICAgICAgICBhdXRvcGxheTogdHJ1ZSxcclxuICAgICAgICBhcnJvd3M6IGZhbHNlLFxyXG4gICAgICAgIGF1dG9wbGF5U3BlZWQ6IDIwMDBcclxuICAgIH0pO1xyXG4gICAgLy9SZXZpZXcgc2xpZGVyXHJcbiAgICAkKCcucGFzdC1zbGlkZXInKS5zbGljayh7XHJcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxyXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgIGF1dG9wbGF5OiB0cnVlLFxyXG4gICAgICAgIGF1dG9wbGF5U3BlZWQ6IDEwMDAsXHJcbiAgICAgICAgcHJldkFycm93OiAnLmNvbS1wcmV2JyxcclxuICAgICAgICBuZXh0QXJyb3c6ICcuY29tLW5leHQnXHJcbiAgICB9KTtcclxuICAgIC8vUmV2aWV3IHBob3RvIHNsaWRlclxyXG4gICAgJCgnLnBhc3Qtd0xlZnQnKS5zbGljayh7XHJcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxyXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgIGF1dG9wbGF5OiB0cnVlLFxyXG4gICAgICAgIGFycm93czogZmFsc2UsXHJcbiAgICAgICAgYXV0b3BsYXlTcGVlZDogMzAwMCxcclxuICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgIGN1c3RvbVBhZ2luZzogZnVuY3Rpb24oc2xpZGVyLCBpKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgMzsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyA8YSBocmVmPVwiI1wiIGNsYXNzPVwiZG90XCI+JyArICQoc2xpZGVyLiRzbGlkZXNbaV0pLmZpbmQoJy5zbGlkZS10aXRsZScpLnRleHQoKSArICc8L2E+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vR2FsbGVyeSBpbml0IFxyXG4gICAgJCgnLnBhc3QtZ2FsbGVyeScpLm1hZ25pZmljUG9wdXAoe1xyXG5cdFx0ZGVsZWdhdGU6ICdhJyxcclxuXHRcdHR5cGU6ICdpbWFnZScsXHJcblx0XHR0TG9hZGluZzogJ9CX0LDQs9GA0YPQt9C60LAgIyVjdXJyJS4uLicsXHJcblx0XHRtYWluQ2xhc3M6ICdtZnAtaW1nLW1vYmlsZScsXHJcblx0XHRnYWxsZXJ5OiB7XHJcblx0XHRcdGVuYWJsZWQ6IHRydWUsXHJcblx0XHRcdG5hdmlnYXRlQnlJbWdDbGljazogdHJ1ZSxcclxuXHRcdFx0cHJlbG9hZDogWzAsMV0gLy8gV2lsbCBwcmVsb2FkIDAgLSBiZWZvcmUgY3VycmVudCwgYW5kIDEgYWZ0ZXIgdGhlIGN1cnJlbnQgaW1hZ2VcclxuXHRcdH0sXHJcblx0XHRpbWFnZToge1xyXG5cdFx0XHR0RXJyb3I6ICc8YSBocmVmPVwiJXVybCVcIj7QmNC30L7QsdGA0LDQttC10L3QuNC1ICMlY3VyciU8L2E+INC90LUg0LzQvtC20LXRgiDQsdGL0YLRjCDQt9Cw0LPRgNGD0LbQtdC90L4uJyxcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0Ly9Mb2FkaW5nIGZvcm1cclxuXHQkKCcub3Blbi1mb3JtJykubWFnbmlmaWNQb3B1cCh7XHJcblx0XHR0eXBlOiAnaW5saW5lJyxcclxuXHRcdHByZWxvYWRlcjogZmFsc2UsXHJcblx0XHRmb2N1czogJyNuYW1lJyxcclxuXHR9KTtcclxuXHJcblx0Ly9TZW5kIGZvcm1zIGRhdGFcclxuICAgIGZ1bmN0aW9uIHNlbmRGb3JtKGlucHV0X2Zvcm0pIHtcclxuICAgICAgICB2YXIgZm9ybSA9ICQoaW5wdXRfZm9ybSk7XHJcbiAgICAgICAgdmFyIGVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgZm9ybS5maW5kKCcucmVxdWlyZWQnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodmFsaWRhdGUodGhpcykpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vU2VuZCBkYXRhXHJcbiAgICAgICAgaWYgKCFlcnJvcikge1xyXG4gICAgICAgICAgICB2YXIgc3RyID0gZm9ybS5zZXJpYWxpemUoKTtcclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgIHVybDogJ3NlbmQucGhwJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHN0cixcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm0uZmluZCgnLnJlcXVpcmVkJykuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgbWFnbmlmaWNQb3B1cC5jbG9zZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLm1hZ25pZmljUG9wdXAub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICcjb3JkZXItZm9ybS1vaycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5saW5lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlQnRuSW5zaWRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0Nsb3NlQnRuOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFnbmlmaWNQb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKCcuZXJyb3Itb3V0JykuaHRtbCgnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vVmFsaWRhdGlvblxyXG4gICAgZnVuY3Rpb24gdmFsaWRhdGUob2JqKSB7XHJcbiAgICAgICAgdmFyIGVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgcGFyZW50ID0gJChvYmopLnBhcmVudCgpO1xyXG4gICAgICAgIGlmICghbm9FbXB0eSgkKG9iaikpKSB7XHJcbiAgICAgICAgICAgICQob2JqKS5hZGRDbGFzcygnZXJyb3InKTtcclxuICAgICAgICAgICAgaWYgKCFlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuKCcuZXJyb3Itb3V0JykuaHRtbCgn0J7QtNC90L4g0LjQtyDQv9C+0LvQtdC5INC90LUg0LfQsNC/0L7Qu9C90LXQvdC+Jyk7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTb21ldGhpbmcgd2VudCBiYWRseSB3cm9uZyFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKG9iaikucmVtb3ZlQ2xhc3MoJ2Vycm9yJyk7XHJcbiAgICAgICAgICAgIGVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICQoJy5lcnJvci1vdXQnKS5odG1sKCcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgkKG9iaikuYXR0cigndHlwZScpID09ICdlbWFpbCcgJiYgIWlzRW1haWwoJChvYmopKSkge1xyXG4gICAgICAgICAgICAkKG9iaikuYWRkQ2xhc3MoJ2Vycm9yJyk7XHJcbiAgICAgICAgICAgIGlmICghZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbignLmVycm9yLW91dCcpLmh0bWwoJ9Cf0YDQvtCy0LXRgNGM0YLQtSDQv9GA0LDQstC40LvRjNC90L7RgdGC0Ywg0LLQstC10LTRkdC90L3Ri9GFINC00LDQvdC90YvRhScpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU29tZXRoaW5nIHdlbnQgYmFkbHkgd3JvbmchXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICgkKG9iaikuYXR0cigndHlwZScpID09ICdlbWFpbCcpIHtcclxuICAgICAgICAgICAgJChvYmopLnJlbW92ZUNsYXNzKCdlcnJvcicpO1xyXG4gICAgICAgICAgICBlcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4oJy5lcnJvci1vdXQnKS5odG1sKCcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgkKG9iaikuYXR0cignbmFtZScpID09ICdwaG9uZScgJiYgIWlzUGhvbmUoJChvYmopKSkge1xyXG4gICAgICAgICAgICAkKG9iaikuYWRkQ2xhc3MoJ2Vycm9yJyk7XHJcbiAgICAgICAgICAgIGlmICghZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbignLmVycm9yLW91dCcpLmh0bWwoJ9Cd0LXQstC10YDQvdGL0Lkg0YLQtdC70LXRhNC+0L0nKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNvbWV0aGluZyB3ZW50IGJhZGx5IHdyb25nIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoJChvYmopLmF0dHIoJ3R5cGUnKSA9PSAncGhvbmUnKSB7XHJcbiAgICAgICAgICAgICQob2JqKS5yZW1vdmVDbGFzcygnZXJyb3InKTtcclxuICAgICAgICAgICAgZXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgJCgnLmVycm9yLW91dCcpLmh0bWwoJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vSXMgb24gbW8gZW1wdHkgdmFsdWUgdGVzdGluZ1xyXG4gICAgZnVuY3Rpb24gbm9FbXB0eShlbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKCQoZWxlbWVudCkudmFsKCkgPT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL0lzIGVtYWlsIHRlc3RpbmdcclxuICAgIGZ1bmN0aW9uIGlzRW1haWwoZWxlbWVudCkge1xyXG4gICAgICAgIHZhciBlbWFpbCA9IC9eWy1cXHcuXStAKFtBLXowLTldWy1BLXowLTldK1xcLikrW0Etel17Miw0fSQvO1xyXG4gICAgICAgIHJldHVybiBlbWFpbC50ZXN0KCQoZWxlbWVudCkudmFsKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vSXMgdGV4dCBmaWVsZCBudW1iZXJzIGFuZCBjaGFydHMgaW4gbGF0aW4gYW5kIGN5cmlsaWNcclxuICAgIGZ1bmN0aW9uIGlzVGV4dChlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIHRleHQgPSAvXlvQsC3Rj9CQLdCv0ZHQgWEtekEtWjAtOV0rJC87XHJcbiAgICAgICAgcmV0dXJuIHRleHQudGVzdCgkKGVsZW1lbnQpLnZhbCgpKTtcclxuICAgIH1cclxuXHJcbiAgICAvL0lzIG51bWJlcnMgZm9yIHBob25lIGZpZWxkXHJcbiAgICBmdW5jdGlvbiBpc1Bob25lKGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgdGV4dCA9IC8oWzAtOV0rKS87XHJcbiAgICAgICAgcmV0dXJuIHRleHQudGVzdCgkKGVsZW1lbnQpLnZhbCgpKTtcclxuICAgIH1cclxuXHJcbiAgICAkKCcuZm9ybS1idG4nKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICBzZW5kRm9ybSgkKHRoaXMpLnBhcmVudCgpKTtcclxuICAgIH0pXHJcblxyXG59KTsiXSwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
//# sourceMappingURL=data:application/json;base64,